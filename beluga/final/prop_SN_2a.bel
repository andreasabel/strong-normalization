
%{
Lemma 3.6: Anti-Renaming
}%

inductive SNRed' : (g : cxt)(g' : cxt) {#R:[g' |-# g]} {M : [g |- tm A[]]} {M' : [g' |- tm A[]]} ctype = 
| SNRed' : {g' : cxt}{g : cxt}{N:[g |- tm A[]]}
           SNRed [g |- M] [g |- N]  
        -> SNRed' [g' |- #R] [g |- M] [g' |- N[#R]] ;

rec anti_renameSNe  : (g : cxt)(g' : cxt) {#R : [g' |-# g]}{M : [g |- tm A[]]} SNe [g' |- M[#R]] -> SNe [g |- M]  =
        / total s (anti_renameSNe g g' a r m s) / 
mlam #R, N => fn s => case s of 
|  SVar [h' |- _ ] =>  SVar [ _ |- _ ]
|  SApp r s => 
   let r' = anti_renameSNe [_ |- #R] [_ |- _] r in 
   let s' = anti_renameSN [_] [_] [_ |- #R] [_ |- _] s in 
    SApp r' s'

and anti_renameSNRed: {g : cxt}{g' : cxt} {#R : [g' |-# g]}{M : [g |- tm A[]]} SNRed [g' |- M[#R]] [g' |- N'] -> SNRed' [g' |- #R] [g |- M] [g' |- N'] =
   / total s (anti_renameSNRed g g' a r m s) / 
mlam g, g', #R, M => fn r => case r of 
| SBeta [_ |- _ ] s => 
  let s' = anti_renameSN [g] [g'] [g' |- #R] [_ |- _ ] s in 
  SNRed' [_] [_] [_ |- _] (SBeta [_ |- _ ] s')
| SAppl r' => 
  let SNRed' [_] [_][_ |- _ ] r0 = anti_renameSNRed [g] [g'] [g' |-#R] [_ |- _ ] r' in 
    SNRed' [_] [_] [_ |- _ ] (SAppl r0)

and anti_renameSN   : {h : cxt}{h' : cxt} {#R : [h' |-# h]}{M : [h |- tm A[]]} SN [h' |- M[#R]] -> SN [h |- M]  =
     / total s (anti_renameSN h h' a r m s) / 
mlam h, h', #R, M => fn s => case s of 
| SAbs s' => 
     SAbs (anti_renameSN [h, x:tm _] [h', x:tm _ ] [h', x:tm _ |- #R[..], x] [h, x:tm _ |- _] s')

| SNeu s' =>  SNeu (anti_renameSNe [h' |- #R] [h |- M] s')
| SRed r' s' => 
   let SNRed' [h'] [h]  [h |- N ] r = anti_renameSNRed [_] [_] [h' |- #R] [_ |- _ ] r' in 
   let s'' = anti_renameSN [h] [h'] [h' |- #R] [h |- N ] s' in 
     SRed r s''
;

%{
Lemma 3.5: Renaming for SN
}%
rec renameSN   : {g : cxt}{g' : cxt} {#R : [g' |-# g]}{M : [g |- tm A[]]}
			  SN [g |- M] -> SN [g' |- M[#R]] =
    / total s (renameSN g g' a r m s) / 
mlam g, g', #R, M => fn s => case s of 
| SNeu s' => SNeu (renameSNe [g' |- #R] [g |- M] s')
| SAbs s' => SAbs (renameSN [g, x:tm _] [g', x:tm _] [g', x:tm _ |- #R[..], x] [g, x:tm _ |- _] s')
| SRed r s' => SRed (renameSNRed [g' |- #R] [g |- M] r)
                   (renameSN [g] [g'] [g' |- #R] [g |- _ ] s')

and renameSNe  : (g : cxt)(g' : cxt) {#R:[g' |-# g]}{M : [g |- tm A[]]}
			  SNe [g |- M] -> SNe [g' |- M[#R]] =
   / total s (renameSNe g g' a r m s) / 
mlam #R, M => fn s => case s of
| SVar [g |- #p] => SVar [_ |- #p[#R]]
| SApp s1 s2 =>  SApp (renameSNe [_ |- #R] [_ |- _ ] s1)
                     (renameSN [_] [_] [_ |- #R] [_ |- _ ] s2)

and renameSNRed: (g : cxt)(g' : cxt) {#R:[g' |-# g]}{M : [g |- tm A[]]}
			  SNRed [g |- M] [g |- N] -> SNRed [g' |- M[#R]] [g' |- N[#R]]=
        / total s (renameSNRed g g' a r m s) / 
mlam #R, M => fn s => case s of
| SBeta [g, x:tm A[] |- M] s' => SBeta [_, x:tm A[] |- M[#R[..], x]] (renameSN [_] [_] [_ |- #R] [_ |- _] s')
| SAppl s' =>    SAppl (renameSNRed [_ |- #R] [_ |- _ ] s')
;

%{
Lemma 3.9: Extensionality of SN
}%

rec ext_SN : {M: [g |- tm (arr A[] B[])]}{#p: [g |- tm A[]]} SN [g |- app M #p] -> SN [g |- M] =
     / total s (ext_SN g a b m p s) /
mlam M, #p => fn s => case s of 
| SNeu (SApp sm sv) => SNeu sm
| SRed r sm' => (case r of 
  | SBeta [g, x:tm A[] |- M'] sn =>   
    let sn' = anti_renameSN [g, x:tm A[] ] [g] [g |- .., #p[..]] [g, x:tm A[] |- M'] sm' in 
      SAbs sn'
   
  | SAppl r'  => 
    let sn = ext_SN [_ |- _] [_ |- #p]  sm' in 
      SRed r' sn)

;% If SNe [g |- R] then Neutral [g |- R].
rec neutralSNe : (g: cxt) {R: [g |- tm A[]]} SNe [g |- R] -> Neutral [g |- R] =
    / total sne (neutralSNe g a r sne) /
    mlam R => fn sne =>
    case sne of
    | SVar [g |- #p] => Nvar [g |- #p]
    | SApp sne' sn => let neu = neutralSNe [_ |- _] sne' in Napp [_ |- _] [_ |- _] neu
;

