% Mechanization of POPLMARK Reloaded challenge:
% Sec 2.1: Well-typed Terms and Reductions
%          Extended with Disjoint Sums

LF ty : type =
   | base : ty
   | arr  : ty -> ty -> ty
   | sum  : ty -> ty -> ty
;
%name ty T.

LF tm : ty -> type =
   | abs   : (tm A -> tm B) -> tm (arr A B)
   | app   : tm (arr A B) -> tm A -> tm B
   | inl   : {B: ty} tm A -> tm (sum A B)
   | inr   : {A: ty} tm B -> tm (sum A B)
   | match : tm (sum A B) -> (tm A -> tm C) -> (tm B -> tm C) -> tm C
;
%name tm M.

schema cxt = tm A;

LF step : tm A -> tm A -> type =
   | rbeta : step (app (abs M) N) (M N)
   | rabs  : ({x : tm A} step (M x) (M' x)) -> step (abs M) (abs M')
   | rappl : step M M' -> step (app M N) (app M' N)
   | rappr : step N N' -> step (app M N) (app M N')
   | rinl  : step M N -> step (inl B M) (inl B N)
   | rinr  : step M N -> step (inr A M) (inr A N)
   | rcase : step M M' -> step (match M N1 N2) (match M' N1 N2)
   | rcinl : step (match (inl B M) N1 N2) (N1 M)
   | rcinr : step (match (inr A M) N1 N2) (N2 M)
   | rcl   : ({x : tm A} step (N x) (N' x)) -> step (match M N N2) (match M N' N2)
   | rcr   : ({x : tm B} step (N x) (N' x)) -> step (match M N1 N) (match M N1 N')
;

LF mstep : tm A -> tm A -> type =
   | m-refl :  mstep M M
   | m-step : step M N -> mstep N M' -> mstep M M'
;


% Substitution property of typed reductions
rec subst_red : (g: cxt) {M : [g, x: tm A[] |- tm B[]]}{M': [g, x: tm A[] |- tm B[]]} {N : [g |- tm A[]]}
			 [g, x: tm A[] |- step M M'] -> [g |- step M[.., N] M'[.., N]] =
/ trust /  % Totality checker does not take into account modulo exchange; it only consider direct subterms 
    mlam M => mlam M' => mlam N => fn s => case s of
    | [g, x: tm A[] |- rbeta] => [_ |- rbeta]

    | [g, x: tm A[] |- rabs (\y. S')] =>
      let [_ |- S'] : [g, x: tm A[], y: tm A'[] |- step M M'] = [_ |- S'] in
      let [g, y:tm A'[] |- S''] =  subst_red [g, y:tm A'[], x : tm A[] |- M[.., x, y]]
                                             [g, y:tm A'[], x : tm A[] |- M'[.., x, y]]
                                             [g, y:tm A'[] |- N[..]]
                                             [g, y:tm A'[], x:tm A[] |- S'[.., x,y]]
      in [g |- rabs \y.S'']

    | [g, x: tm A[] |- rappl S'] => let [_ |- S''] = subst_red [_ |- _] [_ |- _] [_ |- N] [_ |- S'] in
				    [_ |- rappl S'']
    | [g, x: tm A[] |- rappr S'] => let [_ |- S''] = subst_red [_ |- _] [_ |- _] [_ |- N] [_ |- S'] in
				    [_ |- rappr S'']

    | [g, x: tm A[] |- rinl S'] => let [_ |- S''] = subst_red [_ |- _] [_ |- _] [_ |- N] [_ |- S'] in
				   [_ |- rinl S'']
    | [g, x: tm A[] |- rinr S'] => let [_ |- S''] = subst_red [_ |- _] [_ |- _] [_ |- N] [_ |- S'] in
				   [_ |- rinr S'']
    | [g, x: tm A[] |- rcinl] => [_ |- rcinl]
    | [g, x: tm A[] |- rcinr] => [_ |- rcinr]
    | [g, x: tm A[] |- rcase S'] => let [_ |- S''] = subst_red [_ |- _] [_ |- _] [_ |- N] [_ |- S'] in
				    [_ |- rcase S'']
    | [_ |- rcl (\y. S')] : [g, x: tm A[] |- step (match M1 (\x. N1) (\y. N2)) (match M1 (\x. N1') (\y. N2))] =>
      let [g, y: tm B[] |- S''] = subst_red [g, y: tm _, x: tm A[] |- N1[.., x, y]]
					    [_ |- _]
					    [g, y: tm _ |- N[..]]
					    [g, y: tm _, x: tm A[] |- S'[.., x, y]] in
      [_ |- rcl (\x. S'')]
    | [_ |- rcr (\x. S')] : [g, x: tm A[] |- step (match M1 (\x. N1) (\y. N2)) (match M1 (\x. N1) (\y. N2'))] =>
      let [g, y: tm B[] |- S''] = subst_red [g, y: tm _, x: tm A[] |- N2[.., x, y]]
					    [_ |- _]
					    [g, y: tm _ |- N[..]]
					    [g, y: tm _, x: tm A[] |- S'[.., x, y]] in
      [_ |- rcr (\x. S'')]
;

% Properties of multi-step reductions

% Transitivity of multi-step reductions
rec m-trans : (g : cxt) {M1 : [g |- tm A[]]}
              [g |- mstep M1 M] -> [g |- mstep M M2] -> [g |- mstep M1 M2] =
    / total s1 (m-trans g a m1 m2 m s1) /
mlam M1 => fn s1, s2 => case s1 of
| [g |- m-refl] => s2
| [g |- m-step S MS] =>
  let [g |- MS'] = m-trans [g |- _ ] [g |- MS] s2 in
     [g |- m-step S MS']
;

% If [g |- mstep M M'] then [g |- mstep (app M N) (app M' N)].
rec mstep_appl : (g: cxt) {M  : [g |- tm (arr A[] B[])]}{M' : [g |- tm (arr A[] B[])]}{N  : [g |- tm A[]]}
			  [g |- mstep M M'] -> [g |- mstep (app M N) (app M' N)] =
    / total ms (mstep_appl g a b m m' n ms) /
    mlam M => mlam M' => mlam N => fn ms =>
    case ms of
    | [g |- m-refl] => [g |- m-refl]
    | [g |- m-step S MS'] => let [_ |- MS''] = mstep_appl [_ |- _] [_ |- M'] [_ |- N] [_ |- MS'] in
			     [g |- m-step (rappl S) MS'']
;

% If [g |- mstep N N'] then [g |- mstep (app M N) (app M N')].
rec mstep_appr : (g: cxt) {M  : [g |- tm (arr A[] B[])]}{N  : [g |- tm A[]]}{N' : [g |- tm A[]]}
			  [g |- mstep N N'] -> [g |- mstep (app M N) (app M N')] =
    / total ms (mstep_appr g a b m n n' ms) /
    mlam M => mlam N => mlam N' => fn ms =>
    case ms of
    | [g |- m-refl] => [g |- m-refl]
    | [g |- m-step S MS'] => let [_ |- MS''] = mstep_appr [_ |- M] [_ |- _] [_ |- N'] [_ |- MS'] in
			     [g |- m-step (rappr S) MS'']
;

% If [g, x:tm A[] |- mstep M M'] then [g |- mstep (abs \x.M) (abs \x.M')]
rec mstep_abs : (g : cxt) {M : [g , x: tm A[] |- tm B[]]}
			  [g, x:tm A[] |- mstep M M'] -> [g |- mstep (abs \x.M) (abs \x.M')] =
    / total ms (mstep_abs g a b m m' ms) /
    mlam M => fn s1 => case s1 of
    | [g, x:tm A[] |- m-refl] => [g |- m-refl]
    | [g, x:tm A[] |- m-step S MS] =>
      let [g |- MS'] = mstep_abs [g, x : tm A[] |- _ ] [g, x : tm A[] |- MS] in
      let [g |- S'] = [g |- rabs \x.S] in
      [g |- m-step S' MS']
;

% If [g |- mstep M M'] then [g |- mstep (inl M) (inl M')].
rec mstep_inl : (g: cxt) {M  : [g |- tm A[]]}{M' : [g |- tm A[]]}{B  : [|- ty]}
			 [g |- mstep M M'] -> [g |- mstep (inl B[] M) (inl B[] M')] =
    / total ms (mstep_inl g a m m' b ms) /
    mlam M => mlam M' => mlam B => fn ms =>
    case ms of
    | [g |- m-refl] => [g |- m-refl]
    | [g |- m-step S MS'] => let [_ |- MS''] = mstep_inl [_ |- _] [_ |- _] [|- B] [_ |- MS'] in
			     [g |- m-step (rinl S) MS'']
;

% If [g |- mstep M M'] then [g |- mstep (inr M) (inr M')].
rec mstep_inr : (g: cxt) {M  : [g |- tm A[]]}{M' : [g |- tm A[]]}{B  : [|- ty]}
			 [g |- mstep M M'] -> [g |- mstep (inr B[] M) (inr B[] M')] =
    / total ms (mstep_inr g a m m' b ms) /
    mlam M => mlam M' => mlam B => fn ms =>
    case ms of
    | [g |- m-refl] => [g |- m-refl]
    | [g |- m-step S MS] => let [_ |- MS'] = mstep_inr [_ |- _] [_ |- _] [|- B] [_ |- MS] in
			    [g |- m-step (rinr S) MS']
;

% If [g |- mstep M M'] then [g |- mstep (match M N1 N2) (match M' N1 N2)].
rec mstep_match : (g: cxt) {M  : [g |- tm (sum A[] B[])]}{M' : [g |- tm (sum A[] B[])]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			   [g |- mstep M M'] -> [g |- mstep (match M (\x. N1) (\y. N2)) (match M' (\x. N1) (\y. N2))] =
    / total ms (mstep_match g a b c m m' n1 n2 ms) /
    mlam M => mlam M' => mlam N1 => mlam N2 => fn ms =>
    case ms of
    | [g |- m-refl] => [g |- m-refl]
    | [g |- m-step S MS] => let [_ |- MS'] = mstep_match [_ |- _] [_ |- M'] [_ |- N1] [_ |- N2] [_ |- MS] in
			    [g |- m-step (rcase S) MS']
;

% If [g, x: tm A[] |- mstep N N'] then [g |- mstep (match M N N2) (match M N' N2)].
rec mstep_matchl : (g: cxt) {N  : [g, x: tm A[] |- tm C[]]}{N' : [g, x: tm A[] |- tm C[]]}{M  : [g |- tm (sum A[] B[])]}{N2 : [g, y: tm B[] |- tm C[]]}
			    [g, x: tm A[] |- mstep N N']  -> [g |- mstep (match M (\x. N) (\y. N2)) (match M (\x. N') (\y. N2))] =
    / total ms (mstep_matchl g a c b n n' m n2 ms) /
    mlam N => mlam N' => mlam M => mlam N2 => fn ms =>
    case ms of
    | [g, x: tm A[] |- m-refl] => [g |- m-refl]
    | [g, x: tm A[] |- m-step S MS] =>
      let [_ |- MS'] = mstep_matchl [_ |- _] [_ |- N'] [_ |- M] [_ |- N2] [_ |- MS] in
      [g |- m-step (rcl \x. S) MS']
;

% If [g, x: tm B[] |- mstep N N'] then [g |- mstep (match M N1 N) (match M N1 N')].
rec mstep_matchr : (g: cxt) {N  : [g, x: tm B[] |- tm C[]]}{N' : [g, x: tm B[] |- tm C[]]}{M  : [g |- tm (sum A[] B[])]}{N1 : [g, y: tm A[] |- tm C[]]}
			    [g, x: tm B[] |- mstep N N']  -> [g |- mstep (match M (\x. N1) (\y. N)) (match M (\x. N1) (\y. N'))] =
    / total ms (mstep_matchr g b c a n n' m n1 ms) /
    mlam N => mlam N' => mlam M => mlam N1 => fn ms =>
    case ms of
    | [g, x: tm B[] |- m-refl] => [g |- m-refl]
    | [g, x: tm B[] |- m-step S MS] =>
      let [_ |- MS'] = mstep_matchr [_ |- _] [_ |- N'] [_ |- M] [_ |- N1] [_ |- MS] in
      [g |- m-step (rcr \x. S) MS']
;

% If M: [g, x: tm A[] |- tm B[]] and [g |- step N N'] then [g |- mstep M[.., N] M[.., N']].
rec subst_mred : (g: cxt) {M : [g, x: tm A[] |- tm B[]]}{N : [g |- tm A[]]}{N': [g |- tm A[]]}
			  [g |- step N N'] -> [g |- mstep M[.., N] M[.., N']] =
   / trust / % Totality checker does not take into account modulo exchange; it only consider direct subterms 
    mlam M => mlam N => mlam N' => fn s => case [_, x:tm _ |- M] of
    | [g, x:tm A[] |- x ] => let [g |- S] = s in [g |- m-step S m-refl]
    | [g, x:tm A[] |- #p[..] ] => [g |- m-refl]
    | [g, x:tm A[] |- abs \y.M] =>
      let [g |- S] = s in
      let [ g, y: tm _ |- S'] = subst_mred [g, y:tm _ , x:tm A[] |- M[.., x, y]]
					   [g, y:tm _ |- N[..]] [g, y:tm _ |- N'[..]] [g, y:tm _ |- S[..]]  in
      mstep_abs [g, y : tm _ |- _] [g, y: tm _ |- S']
    | [g, x:tm A[] |- app M1 M2] =>
      let [g |- S1] = subst_mred [g, x:tm A[] |- M1] [g |- N] [g |- N'] s in
      let [g |- S2] = subst_mred [g, x:tm A[] |- M2] [g |- N] [g |- N'] s in
      let [g |- MS1] =  mstep_appl [g |- M1[..,N]]  [g |- M1[.., N'] ] [g |- M2[.., N]]    [g |- S1] in
      let [g |- MS2] = mstep_appr  [g |- M1[..,N']]  [g |- M2[..,N]]    [g |- M2[.., N'] ]  [g |- S2] in
      m-trans [g |- _ ] [g |- MS1] [g |- MS2]

    | [g, x:tm A[] |- inl B[] M] => let [_ |- MS] = subst_mred [_ |- M] [_ |- N] [_ |- N'] s in
				    mstep_inl [g |- M[.., N]] [g |- M[.., N']] [|- B] [_ |- MS]
    | [g, x:tm A[] |- inr B[] M] => let [_ |- MS] = subst_mred [_ |- M] [_ |- N] [_ |- N'] s in
				    mstep_inr [_ |- _] [_ |- _] [|- B] [_ |- MS]
    | [g, x:tm A[] |- match M (\x. N1) (\y. N2)] =>
      let [_ |- S] = s in
      let [_ |- S0] = subst_mred [_ |- M] [_ |- N] [_ |- N'] s in
      let [g, y: tm B[] |- S1] = subst_mred [g, y: tm _, x: tm A[] |- N1[.., x, y]]
					    [g, y: tm _ |- N[..]]
					    [g, y: tm _ |- N'[..]]
					    [g, y: tm _ |- S[..]] in
      let [g, y: tm C[] |- S2] = subst_mred [g, y: tm _, x: tm A[] |- N2[.., x, y]]
					    [g, y: tm _ |- N[..]]
					    [g, y: tm _ |- N'[..]]
					    [g, y: tm _ |- S[..]] in
      let [g, x: tm A[], y: tm B[] |- N1'] = [_ |- N1] in
      let [g |- MS0] = mstep_match [g |- M[.., N]]
				   [g |- M[.., N']]
				   [g, y: tm B[] |- N1[.., N[..], y]]
				   [g, y: tm C[] |- N2[.., N[..], y]]
				   [_ |- S0] in
      let [g |- MS1] = mstep_matchl [g, y: tm B[] |- N1[.., N[..], y]]
				    [g, y: tm B[] |- N1[.., N'[..], y]]
				    [g |- M[.., N']]
				    [g, y: tm C[] |- N2[.., N[..], y]]
				    [_ |- S1] in
      let [g |- MS2] = mstep_matchr [g, y: tm C[] |- N2[.., N[..], y]]
				    [g, y: tm C[] |- N2[.., N'[..], y]]
				    [g |- M[.., N']]
				    [g, y: tm B[] |- N1[.., N'[..], y]]
				    [_ |- S2] in
      m-trans [_ |- _] [_ |- MS0] (m-trans [_ |- _] [_ |- MS1] [_ |- MS2])
;
