% Mechanization of POPLMARK Reloaded challenge:
% Sec 2.3 Challenge 1a: Properties of Sn
%                       Extended with Disjoint Sums

% All variables are in sn.
empty: type.

rec varSn : (g:cxt) {#p: [g |- tm A[]]} Sn [g |- #p] =
    / total (varSn) /
      mlam #p => let [_ |- #p] : [g |- tm A[]] = [_ |- #p] in
		 Acc [g] [|- A] [g |- #p ] (mlam M', S => impossible [_ |- S])
;

% If Sn [g, x: tm A[] |- M] then Sn [g |- abs \x. M].
rec abs_sn : {g:cxt} {A : [ |- ty]}{B : [ |- ty]}{M : [g, x: tm A[] |- tm B[]]}
		       Sn [g, x: tm A[] |- M] -> Sn [g |- (abs \x. M)] =
     / total s (abs_sn g a b m  s) /
    mlam g, A, B => mlam M => fn sn => 
    Acc  [g] [ |- arr A B] [ g |- abs \x.M] 
    (mlam Q => mlam S  =>   
     let  [g |- rabs (\x. S1)] = [g |- S] in 
     let [g, x : tm A[] |- S1] : [g, x : tm A[] |- step M M1] = [g, x: tm _ |- S1] in
     let Acc [g,x:tm A[]] [ |- B] [g, x:tm A[] |- M] r = sn in 
      abs_sn [g] [ |- A] [|- B] 
        [g, x:tm  A[] |- M1] (r [g, x: tm A[] |- M1] [g, x: tm A[] |- S1])
    )    
;

% If Sn [g |- app M N] then Sn [g |- M] and Sn [g |- N].
rec app_sna : (g: cxt) {M: [g |- tm (arr A[] B[])]}{N : [g |- tm A[]]}
			 Sn [g |- (app M N)] -> Sn [g |- M] =
    / total s (app_sna g a b m n s) /
    mlam M => mlam N => fn sn =>
    let Acc  [g] [ |- B[]] [g |- app M N] r = sn in
    Acc [_] [_ |- _ ] [_ |- _ ] (mlam M' => mlam S =>
	 app_sna [_ |- M'] [_ |- _] (r [_ |- app M' N] [_ |- rappl S]))
;
rec app_snb : (g: cxt) {M: [g |- tm (arr A[] B[])]}{N : [g |- tm A[]]}
			 Sn [g |- (app M N)] -> Sn [g |- N] =
     / total s (app_snb g a b m n s) /
    mlam M => mlam N => fn sn =>
    let Acc [g] [ |- B[]] [g |- app M N] r = sn in
    Acc [_] [_ |- _ ] [_ |- _ ] (mlam N' => mlam S =>
	 app_snb [_ |- M] [_ |- N'] (r [_ |- app M N'] [_ |- rappr S]))
;

% If Sn [g |- M] then Sn [g |- inl M].
rec inl_sn : (g: cxt) {M: [g |- tm A[]]}{B: [|- ty]}
		      Sn [g |- M] -> Sn [g |- inl B[] M] =
    / total sn (inl_sn g a m b sn) /
    mlam M => mlam B => fn sn =>
    let Acc [g] [|- A[]] [g |- M] r = sn in
    Acc [g] [|- sum A B] [g |- inl B[] M]
	(mlam M' => mlam S => let [g |- rinl S'] = [g |- S] in
			      inl_sn [_ |- _] [|- B] (r [_ |- _] [_ |- S'])
	)
			       
;

% If Sn [g |- M] then Sn [g |- inr M].
rec inr_sn : (g: cxt) {M: [g |- tm B[]]}{A: [|- ty]}
		      Sn [g |- M] -> Sn [g |- inr A[] M] =
    / total sn (inr_sn g b m a sn) /
    mlam M => mlam A => fn sn =>
    let Acc [g] [|- B[]] [g |- M] r = sn in
    Acc [g] [|- sum A B] [g |- inr A[] M]
	(mlam M' => mlam S => let [g |- rinr S'] = [g |- S] in
			      inr_sn [_ |- _] [|- A] (r [_ |- _] [_ |- S'])
	)
;

% If Sn [g |- match M (\x. N1) (\y. N2) then Sn [g |- M] and Sn [g, x: tm A[] |- N1]
% and Sn [g, y: tm B[] |- N2].
rec case_sna : (g: cxt) {M  : [g |- tm (sum A[] B[])]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			Sn [g |- match M (\x. N1) (\y. N2)]  -> Sn [g |- M] =
    / total sn (case_sna g a b c m n1 n2 sn) /
    mlam M => mlam N1 => mlam N2 => fn sn =>
    let [_ |- M]: [g |- tm (sum A[] B[])] = [_ |- M] in
    let Acc [g] [|- C] [g |- match M (\x. N1) (\y. N2)] r = sn in
    Acc [g] [|- sum A[] B[]] [g |- M]
	(mlam M', S => case_sna [_ |- M'] [_ |- N1] [_ |- N2] (r [_ |- _] [_ |- rcase S]))
;
rec case_snb : (g: cxt) {M  : [g |- tm (sum A[] B[])]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			Sn [g |- match M (\x. N1) (\y. N2)] -> Sn [g, x: tm A[] |- N1] =
    / total sn (case_snb g a b c m n1 n2 sn) /
    mlam M => mlam N1 => mlam N2 => fn sn =>
    let [_ |- N1]: [g, x: tm A[] |- tm C[]] = [_ |- N1] in
    let Acc [g] [|- C] [g |- match M (\x. N1) (\y. N2)] r = sn in
    Acc [g, x: tm A[]] [|- C] [g, x: tm A[] |- N1]
	(mlam N1', S => case_snb [_ |- M] [_ |- N1'] [_ |- N2] (r [_ |- _] [_ |- rcl (\x. S)]))
;
rec case_snc : (g: cxt) {M  : [g |- tm (sum A[] B[])]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			Sn [g |- match M (\x. N1) (\y. N2)]  -> Sn [g, y: tm B[] |- N2] =
    / total sn (case_snc g a b c m n1 n2 sn) /
    mlam M => mlam N1 => mlam N2 => fn sn =>
    let [_ |- N2]: [g, y: tm B[] |- tm C[]] = [_ |- N2] in
    let Acc [g] [|- C] [g |- match M (\x. N1) (\y. N2)] r = sn in
    Acc [g, y: tm B[]] [|- C] [g, y: tm B[] |- N2]
	(mlam N2', S => case_snc [_ |- M] [_ |- N1] [_ |- N2'] (r [_ |- _] [_ |- rcr (\y. S)]))
;

% If Sn [g |- N] and Sn [g |- M[.., N]] then Sn [g |- app (abs \x. M) N].
rec app_abs_sn : {g: cxt} {A : [ |- ty]}{B : [ |- ty]}{M: [g, x: tm A[] |- tm B[]]}{N: [g |- tm A[]]}
			Sn [g |- M[.., N]] -> Sn [g |- N] -> Sn [g |- app (abs \x. M) N] =
  / total {sn2 sn1} (app_abs_sn g a b m n sn1 sn2) /
   mlam g, A, B, M, N => fn sn1 => fn sn2 =>
   Acc [g] [ |- B] [g |- app (abs \x. M) N]
       (mlam P, S => case [_ |- S] of
	| [g |- rbeta] => sn1
	| [g |- rappl S'] => let [_ |- rabs (\x. S'')] = [_ |- S'] in
			     let [_ |- S''] : [g, x: tm _ |- step M M'] = [_ |- S''] in
			     let [_ |- S'''] = [_ |- S''[.., N]] in
			     let Acc [g] [ |- B] [g |- _ ] r = sn1 in
			     app_abs_sn [g] [|- _] [|- _] [_ |- M'] [_ |- N] (r [_ |- M'[.., N]] [_ |- S''']) sn2
	| [g |- rappr S'] => let Acc [g] [ |- A] [g |- N] r = sn2 in
			     let [_ |- S'] : [_ |- step N N'] = [_ |- S'] in
			     let [_ |- MS''] = subst_mred [_ |- M] [_ |- N] [_ |- N'] [_ |- S'] in
			     let sn' = mstep_sn [_ |- M[.., N]] [_ |- M[.., N']] [_ |- MS''] sn1 in
			     app_abs_sn [g] [|- _] [|- _] [_ |- M] [_ |- N'] sn' (r [_ |- N'] [_ |- S'])
       )
;

% Neutral terms
inductive Neutral: (g: cxt) {M: [g |- tm A[]]} ctype =
  | Nvar  : {#x: [g |- tm A[]]} Neutral [g |- #x]
  | Napp  : {R: [g |- tm (arr A[] B[])]} {N: [g |- tm A[]]} Neutral [g |- R]
	    -> Neutral [g |- app R N]
  | Ncase : {R: [g |- tm (sum A[] B[])]}
		{N1: [g, x: tm A[] |- tm C[]]}
		{N2: [g, y: tm B[] |- tm C[]]}
		Neutral [g |- R]
	    -> Neutral [g |- match R (\x. N1) (\y. N2)]
;

% Closure properties of neutral terms

% If Neutral [g |- R] and [g |- step R R'] then Neutral [g |- R'].
rec neu_step : (g: cxt) {R  : [g |- tm A[]]}{R' : [g |- tm A[]]}
			[g |- step R R'] -> Neutral [g |- R] -> Neutral [g |- R'] =
    / total s (neu_step g a r r' s n) /
    mlam R => mlam R' => fn s => fn neu =>
    case neu of
    | Nvar [g |- #x] => impossible s
    | Napp [g |- R''] [g |- N] neu' =>
      (case s of
       | [g |- rbeta ] => impossible neu'
       | [g |- rappl S'] => let neu'' = neu_step [_ |- R''] [_ |- _] [_ |- S'] neu' in
			    Napp [_ |- _] [_ |- N] neu''
       | [g |- rappr S'] => Napp [_ |- R''] [_ |- _] neu'
      )
    | Ncase [g |- R''] [g, x: tm A[] |- N1] [g, y: tm B[] |- N2] neu' =>
      (case s of
       | [g |- rcase S'] => let neu'' = neu_step [_ |- R''] [_ |- _] [_ |- S'] neu' in
			    Ncase [_ |- _] [_ |- N1] [_ |- N2] neu''
       | [g |- rcinl] => impossible neu'
       | [g |- rcinr] => impossible neu'		      
       | [g |- rcl (\x. S')] => Ncase [_ |- R''] [_ |- _] [_ |- N2] neu'
       | [g |- rcr (\y. S')] => Ncase [_ |- R''] [_ |- N1] [_ |- _] neu'
      )
;

% If Neutral [g |- R] and Sn [g |- R] and Sn [g |- N] then Sn [g |- app R N].
rec app_sn : {g: cxt}{A:[ |- ty]}{B: [ |- ty]}{R: [g |- tm (arr A[] B[])]}{N: [g |- tm A[]]}
		     Neutral [g |- R] -> Sn [g |- R] -> Sn [g |- N] -> Sn [g |- app R N] =
    / total {sn1 sn2} (app_sn g a b r n neu sn1 sn2) /
    mlam g, A, B, R, N => fn neu => fn sn1 => fn sn2 =>
    Acc [g] [ |- B] [g |- app R N]
	(mlam Q, S => case [g |- S] of
	 | [g |- rbeta] => impossible neu
	 | [g |- rappl S'] => let Acc [g] [ |- arr A B] [g |- R] r = sn1 in
			      let neu' = neu_step [_ |- _] [_ |- _] [_ |- S'] neu in
			      app_sn [g] [|- A] [|- B] [g |- _] [g |- N] neu' (r [_ |- _] [_ |- S']) sn2
	 | [g |- rappr S'] => let Acc [g] [|- A] [g |- N] r = sn2 in
 			      app_sn [g] [ |- A] [|- B] [_ |- R] [_ |- _] neu sn1 (r [_ |- _] [_ |- S'])
	)
;

% If Neutral [g |- R], Sn [g |- R], Sn [g, x: tm A[] |- N1], and Sn [g, y: tm B[] |- N2], then
% Sn [g |- match R (\x. N1) (\y. N2)].
rec match_sn : (g: cxt) {R  : [g |- tm (sum A[] B[])]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			Neutral [g |- R] -> Sn [g |- R] -> Sn [g, x: tm A[] |- N1] -> Sn [g, y: tm B[] |- N2]
 	              -> Sn [g |- match R (\x. N1) (\y. N2)] =
    / total {sn0 sn1 sn2} (match_sn g a b c r n1 n2 neu sn0 sn1 sn2) /
    mlam R => mlam N1 => mlam N2 => fn neu => fn sn0 => fn sn1 => fn sn2 =>
    let [_ |- N1] : [g, x: tm A[] |- tm C[]] = [_ |- N1] in
    Acc [g] [|- C] [g |- match R (\x. N1) (\y. N2)]
	(mlam M', S => case [g |- S] of
	 | [g |- rcase S'] => let Acc [g] [|- sum A[] B[]] [g |- R] r = sn0 in
			      let neu' = neu_step [_ |- _] [_ |- _] [_ |- S'] neu in
			      match_sn [_ |- _] [_ |- N1] [_ |- N2] neu' (r [_ |- _] [_ |- S']) sn1 sn2
	 | [g |- rcinl] => impossible neu
	 | [g |- rcinr] => impossible neu
	 | [g |- rcl (\x. S')] => let Acc [g, x: tm A[]] [|- C[]] [g, x: tm A[] |- N1] r = sn1 in
				  match_sn [_ |- R] [_ |- _] [_ |- N2] neu sn0 (r [_ |- _] [_ |- S']) sn2
	 | [g |- rcr (\y. S')] => let Acc [g, y: tm B[]] [|- C[]] [g, y: tm B[] |- N2] r = sn2 in
				  match_sn [_ |- R] [_ |- N1] [_ |- _] neu sn0 sn1 (r [_ |- _] [_ |- S'])
	)
;

% If Sn [g |- M] and Sn [g |- [M/x]N1] and Sn [g, y: tm B[] |- N2]
% then Sn [g |- match (inl M) (\x. N1) (\y. N2)].
rec casel_sn : (g: cxt) {M  : [g |- tm A[]]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			Sn [g |- M] -> Sn [g |- N1[.., M]] -> Sn [g, y: tm B[] |- N2] -> Sn [g |- match (inl B[] M) (\x. N1) (\y. N2)] =
    / total {sn0 sn1 sn2} (casel_sn g a b c m n1 n2 sn0 sn1 sn2) /
    mlam M => mlam N1 => mlam N2 => fn sn0 => fn sn1 => fn sn2 =>
    let [_ |- N1] : [g, x: tm A[] |- tm C[]] = [_ |- N1] in
    let [_ |- N2] : [g, y: tm B[] |- tm C[]] = [_ |- N2] in
    Acc [g] [|- C] [g |- match (inl B[] M) (\x. N1) (\y. N2)]
	(mlam P, S =>
	 case [g |- S] of
	 | [g |- rcase (rinl S')] => let Acc [g] [|- A] [g |- M] r = sn0 in
				     let ms = subst_mred [_ |- N1] [_ |- M] [_ |- _] [_ |- S'] in
				     let sn1' = mstep_sn [_ |- N1[.., M]] [_ |- _] ms sn1 in
				     casel_sn [_ |- _] [_ |- N1] [_ |- N2] (r [_ |- _] [_ |- S']) sn1' sn2
	 | [g |- rcinl] => sn1
	 | [g |- rcl (\x. S')] => let [_ |- S''] = [_ |- S'[.., M]] in
				  let Acc [g] [|- C] [g |- _] r = sn1 in
				  casel_sn [_ |- M] [_ |- _] [_ |- N2] sn0 (r [_ |- _] [_ |- S'']) sn2
	 | [g |- rcr (\y. S')] => let Acc [g, y: tm B[]] [|- C] [g, y: tm B[] |- N2] r = sn2 in
				  casel_sn [_ |- M] [_ |- N1] [_ |- _] sn0 sn1 (r [_ |- _] [_ |- S'])
	)
;

% If Sn [g |- M] and Sn [g, x: tm A[] |- N1] and Sn [g |- [M/y]N2]
% then Sn [g |- match (inr M) (\x. N1) (\y. N2)].
rec caser_sn : (g: cxt) {M  : [g |- tm B[]]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			Sn [g |- M] -> Sn [g, x: tm A[] |- N1] -> Sn [g |- N2[.., M]]   -> Sn [g |- match (inr A[] M) (\x. N1) (\y. N2)] =  
%    / trust / % Lexicographic induction on sn0, sn1, sn2
     / total {sn0 sn1 sn2} (caser_sn g b a c m n1 n2 sn0 sn1 sn2) /
    % Totality declaration gives a type error when all 3 of sn0, sn1, sn2 are in it.
    mlam M => mlam N1 => mlam N2 => fn sn0 => fn sn1 => fn sn2 =>
    let [_ |- N1] : [g, x: tm A[] |- tm C[]] = [_ |- N1] in
    let [_ |- N2] : [g, y: tm B[] |- tm C[]] = [_ |- N2] in
    Acc [g] [|- C] [g |- match (inr A[] M) (\x. N1) (\y. N2)]
	(mlam P, S =>
	 case [g |- S] of
	 | [g |- rcase (rinr S')] => let Acc [g] [|- B] [g |- M] r = sn0 in
				     let ms = subst_mred [g, x:tm B[] |- N2] [g |- M[..]] [g |- _] [g |- S'] in
				     let sn2' = mstep_sn [g |- N2[.., M]] [g |- _] ms sn2 in
				     caser_sn [g |- _] [g, x:tm A[] |- N1] [g, x:tm B[] |- N2] (r [g |- _] [g |- S']) sn1 sn2'
	 | [g |- rcinr] => sn2
	 | [g |- rcl (\x. S')] => let Acc [g, x: tm A[]] [|- C] [g, x: tm A[] |- N1] r = sn1 in
				  caser_sn [_ |- M] [_ |- _] [_ |- N2] sn0 ( r [_ |- _] [_ |- S']) sn2
	 | [g |- rcr (\y. S')] => let [_ |- S''] = [_ |- S'[.., M]] in
				  let Acc [g] [|- C] [g |- _] r = sn2 in
				  caser_sn [_ |- M] [_ |- N1] [_ |- _] sn0 sn1 (r [_ |- _] [_ |- S''])
	)
;

% Confluence of sn

inductive ConfResult : (g: cxt) {N: [g |- tm A[]]} {N': [g |- tm A[]]} ctype =
  | Eq    : ConfResult [g |- N] [g |- N]
  | Conf  : SnRed [g |- N'] [g |- Q] -> [g |- mstep N Q] -> ConfResult [g |- N] [g |- N']
;

rec confluence : (g: cxt) {M : [g |- tm A[]]}{N : [g |- tm A[]]}{N': [g |- tm A[]]}{S : [g |- step M N']}
			  SnRed [g |- M] [g |- N] -> ConfResult [g |- N] [g |- N'] =
    / total s (confluence g a m n n' s) /
    mlam M => mlam N => mlam N' => mlam S => fn snr =>
    case snr of
    | SnBeta [g, x: tm A[] |- M] sn =>
      (case [g |- S] of
       | [g |- rbeta] => Eq
       | [g |- rappl S'] => let [_ |- rabs (\x. S'')] = [_ |- S'] in
			    let [_ |- S''] : [g, x: tm _ |- step M M'] = [_ |- S''] in
			    let snr' = SnBeta [g, x: tm _ |- M'] sn in
			    let sn : Sn [g |- N] = sn in
			    let [_ |- R] = [_ |- S''[.., N]] in
			    Conf snr' [g |- m-step R m-refl]
       | [g |- rappr S'] => let [_ |- S'] : [_ |- step N N'] = [_ |- S'] in
			    let ms = subst_mred [_ |- M] [_ |- N] [_ |- N'] [_ |- S'] in
			    let Acc [_] [ |- _] [_ |- _ ] r = sn in
			    let sn' = r [_ |- N'] [_ |- S'] in
			    Conf (SnBeta [g, x: tm _ |- M] sn') ms
      )
    | SnAppl r =>
      (case [_ |- S] of
       | [g |- rbeta] => impossible r
       | [g |- rappl S'] => let conf = confluence [_ |- _] [_ |- _] [_ |- _] [_ |- S'] r in
			    (case conf of
			     | Eq => Eq
			     | Conf snr' ms => let snr' : SnRed [g |- M2] [g |- P] = snr' in
					       let ms' = mstep_appl [_ |- _] [_ |- P] [_ |- _] ms in
					       Conf (SnAppl snr') ms'
			    )
       | [g |- rappr S'] => let ms = [_ |- m-step S' m-refl] in
			    let r: SnRed [_ |- M] [_ |- M'] = r in
			    let ms' = mstep_appr [_ |- M'] [_ |- _] [_ |- _] ms in
			    Conf (SnAppl r) ms'
      )

    | SnCInl sn sn1 sn2 =>
      let Acc [g] [|- sum A1[] A2[]] [g |- M0] r = sn in
      (case [g |- S] of
       | [g |- rcase (rinl S')] => let sn' = r [_ |- _] [_ |- S'] in
				   let snr' = SnCInl sn' sn1 sn2 in
				   let Acc [_] [|- _] [_ |- N1] r = sn1 in
				   let ms = subst_mred [_ |- N1] [_ |- M0] [_ |- _] [_ |- S'] in
				   Conf snr' ms
       | [g |- rcinl] => Eq
       | [g |- rcl (\x. S')] => let [_ |- S'] : [g, x: tm _ |- step N1 N1'] = [_ |- S'] in
				let [_ |- S''] = [_ |- S'[.., M0]] in
				let Acc [g, x: tm A[]] [|- C] [g, x: tm A[] |- N1] r = sn1 in
				let sn1' = r [_ |- N1'] [_ |- S'] in
				let snr' = SnCInl sn sn1' sn2 in
				Conf snr' [g |- m-step S'' m-refl]
       | [g |- rcr (\y. S')] => let Acc [g, y: tm A2[]] [|- C[]] [g, y: tm A2[] |- N2] r' = sn2 in
				let sn2' = r' [_ |- _] [_ |- S'] in
				let snr' = SnCInl sn sn1 sn2' in
				Conf snr' [g |- m-refl]
      )
    | SnCInr sn sn1 sn2 =>
      let Acc [g] [|- sum A1[] A2[]] [g |- M0] r = sn in
      (case [g |- S] of
       | [g |- rcase (rinr S')] => let sn' = r [_ |- _] [_ |- S'] in
				   let Acc [_] [|- _] [_ |- N2] r = sn2 in
				   let snr' = SnCInr sn' sn1 sn2 in
				   let ms = subst_mred [_ |- N2] [_ |- M0] [_ |- _] [_ |- S'] in
				   Conf snr' ms
       | [g |- rcinr] => Eq
       | [g |- rcl (\x. S')] => let Acc [g, x: tm A1[]] [|- C[]] [g, x: tm A1[] |- N1] r' = sn1 in
				let sn1' = r' [_ |- _] [_ |- S'] in
				let Acc [_] [|- _] [_ |- N2] r = sn2 in
				let snr' = SnCInr sn sn1' sn2 in
				Conf snr' [g |- m-refl]
       | [g |- rcr (\x. S')] => let [_ |- S'] : [g, x: tm _ |- step N2 N2'] = [_ |- S'] in
				let [_ |- S''] = [_ |- S'[.., M0]] in
				let Acc [g, y: tm B[]] [|- C] [g, y: tm B[] |- N2] r = sn2 in
				let sn2' = r [_ |- N2'] [_ |- S'] in
				let snr' = SnCInr sn sn1 sn2' in
				Conf snr' [g |- m-step S'' m-refl]
      )
    | SnCasR snr' [g, x: tm A[] |- N1] [g, y: tm B[] |- N2] =>
      (case [g |- S] of
       | [g |- rcase S'] => let conf = confluence [_ |- _] [_ |- _] [_ |- _] [_ |- S'] snr' in
			    (case conf of
			     | Eq  => Eq
			     | Conf snr'' ms =>
			       let [_ |- MS] = mstep_match [_ |- _] [_ |- _] [_ |- N1] [_ |- N2] ms in
			       Conf (SnCasR snr'' [_ |- N1] [_ |- N2]) [_ |- MS]
			    )
       | [g |- rcinl] => impossible snr'
       | [g |- rcinr] => impossible snr'
       | [g |- rcl (\x. S')] =>
	 let [_ |- S'] : [g, x: tm _ |- step N1 N1'] = [_ |- S'] in
	 let snr'' = SnCasR snr' [_ |- N1'] [_ |- N2] in
	 let snr' : SnRed [g |- M] [g |- M'] = snr' in
	 let ms = mstep_matchl [_ |- N1] [_ |- N1'] [_ |- M'] [_ |- N2] [_ |- m-step S' m-refl] in
	 Conf snr'' ms
       | [g |- rcr (\y. S')] =>
	 let [_ |- S'] : [g, x: tm _ |- step N2 N2'] = [_ |- S'] in
	 let snr'' = SnCasR snr' [_ |- N1] [_ |- N2'] in
	 let snr' : SnRed [g |- M] [g |- M'] = snr' in
	 let ms = mstep_matchr [_ |- N2] [_ |- N2'] [_ |- M'] [_ |- N1] [_ |- m-step S' m-refl] in
	 Conf snr'' ms
      )
;

% Backward closure of sn

rec bc_aux_app : {g: cxt}{A : [ |- ty]}{B : [ |- ty]}{M : [g |- tm (arr A[] B[])]}{M': [g |- tm (arr A[] B[])]}{N : [g |- tm A[]]}
			 Sn [g |- M] -> Sn [g |- N] -> SnRed [g |- M] [g |- M'] -> Sn [g |- app M' N] -> Sn [g |- app M N] =
  / total {sn1 sn2} (bc_aux_app g a b m m' n sn1 sn2) /
    mlam g, A, B, M, M', N => fn sn1 => fn sn2 => fn snr => fn sn =>
    Acc  [g] [ |- B] [g |- app M N]
         (mlam Q, S => case [g |- S] of
	  | [g |- rbeta] => impossible snr
	  | [g |- rappl S'] =>
	    let conf = confluence [_ |- M] [_ |- M'] [_ |- _] [_ |- S'] snr in
	    (case conf of
	     | Eq => sn
	     | Conf snr' ms =>
	       let ms' = mstep_appl [_ |- M'] [_ |- _] [_ |- N] ms in
	       let sn' = mstep_sn [_ |- app M' N] [_ |- _] ms' sn in
	       let Acc [g] [ |- arr A B] [g |- M] r = sn1 in
	       bc_aux_app [_] [ |- _] [ |- _ ] [_ |- _] [_ |- _] [_ |- N] (r [_ |- _] [_ |- S']) sn2 snr' sn'
	    )
	  | [g |- rappr S'] =>
	    let Acc [g] [ |- B] [g |- app M' N] r = sn in
	    let sn' = r [_ |- _] [_ |- rappr S'] in
	    let Acc [g] [ |- A] [g |- N] r' = sn2 in
	    bc_aux_app  [_] [ |- _] [ |- _ ] [_ |- M] [_ |- M'] [_ |- _] sn1 (r' [_ |- _] [_ |- S']) snr sn'
	 )
;

rec bc_aux_sum : (g: cxt) {M  : [g |- tm (sum A[] B[])]}{M' : [g |- tm (sum A[] B[])]}{N1 : [g, x: tm A[] |- tm C[]]}{N2 : [g, y: tm B[] |- tm C[]]}
			  Sn [g |- M] -> Sn [g, x: tm A[] |- N1] -> Sn [g, y: tm B[] |- N2]  -> SnRed [g |- M] [g |- M']
		 -> Sn [g |- match M' (\x. N1) (\y. N2)]
		 -> Sn [g |- match M  (\x. N1) (\y. N2)] =
   / total {sn0 sn1 sn2} (bc_aux_sum g a b c m m' n1 n2 sn0 sn1 sn2) /
    mlam M => mlam M' => mlam N1 => mlam N2 => fn sn0 => fn sn1 => fn sn2 => fn snr => fn sn' =>
    let [_ |- N1] : [g, x: tm A[] |- tm C[]] = [_ |- N1] in
    Acc [g] [|- C] [g |- match M (\x. N1) (\y. N2)]
	(mlam Q, S =>
	 case [g |- S] of
	 | [g |- rcase S'] =>
	   let conf = confluence [_ |- M] [_ |- M'] [_ |- _] [_ |- S'] snr in
	   (case conf of
	    | Eq => sn'
	    | Conf snr' ms =>
	      let [_ |- MS] = mstep_match [_ |- M'] [_ |- _] [_ |- N1] [_ |- N2] ms in
	      let sn'' = mstep_sn [_ |- _] [_ |- _] [_ |- MS] sn' in
	      let Acc [g] [|- _] [g |- M] r = sn0 in
	      bc_aux_sum [_ |- _] [_ |- _] [_ |- N1] [_ |- N2] ( r [_ |- _] [_ |- S']) sn1 sn2 snr' sn''
	   )
	 | [g |- rcinl] => impossible snr
	 | [g |- rcinr] => impossible snr
	 | [g |- rcl (\x. S')] =>
	   let [_ |- S']: [g, x: tm _ |- step N1 N1'] = [_ |- S'] in
	   let Acc [g] [|- _] [g |- _] r = sn' in
	   let sn'' = r [g |- match M' (\x. N1') (\y. N2)] [g |- rcl (\x. S')] in
	   let Acc [g, x: tm _] [|- C] [g, x: tm _ |- N1] r' = sn1 in
	   bc_aux_sum [_ |- M] [_ |- M'] [_ |- N1'] [_ |- N2] sn0 (r' [_ |- N1'] [_ |- S']) sn2 snr sn''
	 | [g |- rcr (\y. S')] =>
	   let [_ |- S']: [g, y: tm _ |- step N2 N2'] = [_ |- S'] in
	   let Acc [g] [|- _] [g |- _] r = sn' in
	   let sn'' = r [g |- match M' (\x. N1) (\y. N2')] [g |- rcr (\y. S')] in
	   let Acc [g, y: tm _] [|- C] [g, y: tm _ |- N2] r' = sn2 in
	   bc_aux_sum [_ |- M] [_ |- M'] [_ |- N1] [_ |- N2'] sn0 sn1 (r' [_ |- N2'] [_ |- S']) snr sn''
	)
;

rec backwards_closure : (g: cxt) {M : [g |- tm A[]]}{M': [g |- tm A[]]}
				 SnRed [g |- M] [g |- M'] -> Sn [g |- M']	-> Sn [g |- M] =
    / total r (backwards_closure g a m m' r) /
    mlam M => mlam M' => fn snr => fn sn =>
    case snr of
    | SnBeta ([g, x: tm A[] |- M]) sn' => app_abs_sn [_] [|- _] [|- _] [_ |- M] [_ |- _] sn sn'
    | SnAppl r => let snl' = app_sna [_ |- _] [_ |- _] sn in
		  let snl = backwards_closure [_ |- _] [_ |- _] r snl' in
		  let snr = app_snb [_ |- _] [_ |- _] sn in
		  bc_aux_app [_] [ |- _] [ |- _ ] [_ |- _] [_ |- _] [_ |- _] snl snr r sn

    | SnCInl sn0 sn1 sn2 => casel_sn [_ |- _] [_ |- _] [_ |- _] sn0 sn sn2
    | SnCInr sn0 sn1 sn2 => caser_sn [_ |- _] [_ |- _] [_ |- _] sn0 sn1 sn
    | SnCasR snr' [g, x: tm A[] |- N1] [g, y: tm B[] |- N2] =>
      let sn' = case_sna [_ |- _] [_ |- N1] [_ |- N2] sn in
      let sn0 = backwards_closure [_ |- _] [_ |- _] snr' sn' in
      let sn1 = case_snb [_ |- _] [_ |- N1] [_ |- N2] sn in
      let sn2 = case_snc [_ |- _] [_ |- N1] [_ |- N2] sn in
      bc_aux_sum [_ |- _] [_ |- _] [_ |- _] [_ |- _] sn0 sn1 sn2 snr' sn
;
